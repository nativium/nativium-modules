// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/io/NTVFileHelperPlatformService.hpp"  // my header

namespace djinni_generated {


bool NTVFileHelperPlatformService::JsProxy::createFile(const std::string & path) {
    auto ret = callMethod("createFile", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::createFileWithStringContent(const std::string & path,const std::string & content) {
    auto ret = callMethod("createFileWithStringContent", ::djinni::String::fromCpp(path),
                                                         ::djinni::String::fromCpp(content));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::createFileWithBinaryContent(const std::string & path,const std::vector<uint8_t> & content) {
    auto ret = callMethod("createFileWithBinaryContent", ::djinni::String::fromCpp(path),
                                                         ::djinni::Binary::fromCpp(content));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::createDir(const std::string & path) {
    auto ret = callMethod("createDir", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

std::vector<std::string> NTVFileHelperPlatformService::JsProxy::listFiles(const std::string & path) {
    auto ret = callMethod("listFiles", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::List<::djinni::String>::toCpp(ret);
}

std::string NTVFileHelperPlatformService::JsProxy::getExtension(const std::string & path) {
    auto ret = callMethod("getExtension", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::string NTVFileHelperPlatformService::JsProxy::getFilename(const std::string & path) {
    auto ret = callMethod("getFilename", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::string NTVFileHelperPlatformService::JsProxy::getBasename(const std::string & path) {
    auto ret = callMethod("getBasename", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::string NTVFileHelperPlatformService::JsProxy::getFilenameFromUrl(const std::string & url) {
    auto ret = callMethod("getFilenameFromUrl", ::djinni::String::fromCpp(url));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::string NTVFileHelperPlatformService::JsProxy::getBasenameFromUrl(const std::string & url) {
    auto ret = callMethod("getBasenameFromUrl", ::djinni::String::fromCpp(url));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

bool NTVFileHelperPlatformService::JsProxy::removeFile(const std::string & path) {
    auto ret = callMethod("removeFile", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::removeDir(const std::string & path) {
    auto ret = callMethod("removeDir", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::isDir(const std::string & path) {
    auto ret = callMethod("isDir", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::isFile(const std::string & path) {
    auto ret = callMethod("isFile", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

int64_t NTVFileHelperPlatformService::JsProxy::getFileSize(const std::string & path) {
    auto ret = callMethod("getFileSize", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::I64::toCpp(ret.as<int64_t>());
}

bool NTVFileHelperPlatformService::JsProxy::copyFile(const std::string & from,const std::string & to) {
    auto ret = callMethod("copyFile", ::djinni::String::fromCpp(from),
                                      ::djinni::String::fromCpp(to));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

bool NTVFileHelperPlatformService::JsProxy::moveFile(const std::string & from,const std::string & to) {
    auto ret = callMethod("moveFile", ::djinni::String::fromCpp(from),
                                      ::djinni::String::fromCpp(to));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

std::string NTVFileHelperPlatformService::JsProxy::join(const std::string & first,const std::string & second) {
    auto ret = callMethod("join", ::djinni::String::fromCpp(first),
                                  ::djinni::String::fromCpp(second));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::string NTVFileHelperPlatformService::JsProxy::getFileContentAsString(const std::string & path) {
    auto ret = callMethod("getFileContentAsString", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

std::vector<uint8_t> NTVFileHelperPlatformService::JsProxy::getFileContentAsBinary(const std::string & path) {
    auto ret = callMethod("getFileContentAsBinary", ::djinni::String::fromCpp(path));
    checkError(ret);
    return ::djinni::Binary::toCpp(ret);
}

std::string NTVFileHelperPlatformService::JsProxy::getHomeDir() {
    auto ret = callMethod("getHomeDir");
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

EMSCRIPTEN_BINDINGS(nativium_io_file_helper_platform_service) {
    em::class_<::nativium::io::FileHelperPlatformService>("FileHelperPlatformService")
        .smart_ptr<std::shared_ptr<::nativium::io::FileHelperPlatformService>>("FileHelperPlatformService")
        .function("nativeDestroy", &NTVFileHelperPlatformService::nativeDestroy)
        ;
}

}  // namespace djinni_generated
