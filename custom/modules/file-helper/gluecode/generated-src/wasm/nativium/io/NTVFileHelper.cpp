// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/io/NTVFileHelper.hpp"  // my header
#include "nativium/io/NTVFileHelperPlatformService.hpp"

namespace djinni_generated {

em::val NTVFileHelper::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "setPlatformService",
        "getPlatformService",
        "hasPlatformService",
    });
    return methods;
}

em::val NTVFileHelper::shared() {
    try {
        auto r = ::nativium::io::FileHelper::shared();
        return ::djinni_generated::NTVFileHelper::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVFileHelper>::handleNativeException(e);
    }
}
void NTVFileHelper::setPlatformService(const CppType& self, const em::val& w_ps) {
    try {
        self->setPlatformService(::djinni_generated::NTVFileHelperPlatformService::toCpp(w_ps));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVFileHelper::getPlatformService(const CppType& self) {
    try {
        auto r = self->getPlatformService();
        return ::djinni_generated::NTVFileHelperPlatformService::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVFileHelperPlatformService>::handleNativeException(e);
    }
}
bool NTVFileHelper::hasPlatformService(const CppType& self) {
    try {
        auto r = self->hasPlatformService();
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::createFile(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::createFile(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::createFileWithStringContent(const std::string& w_path,const std::string& w_content) {
    try {
        auto r = ::nativium::io::FileHelper::createFileWithStringContent(::djinni::String::toCpp(w_path),
                                    ::djinni::String::toCpp(w_content));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::createFileWithBinaryContent(const std::string& w_path,const em::val& w_content) {
    try {
        auto r = ::nativium::io::FileHelper::createFileWithBinaryContent(::djinni::String::toCpp(w_path),
                                    ::djinni::Binary::toCpp(w_content));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::createDir(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::createDir(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
em::val NTVFileHelper::listFiles(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::listFiles(::djinni::String::toCpp(w_path));
        return ::djinni::List<::djinni::String>::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::List<::djinni::String>>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getExtension(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getExtension(::djinni::String::toCpp(w_path));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getFilename(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getFilename(::djinni::String::toCpp(w_path));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getBasename(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getBasename(::djinni::String::toCpp(w_path));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getFilenameFromUrl(const std::string& w_url) {
    try {
        auto r = ::nativium::io::FileHelper::getFilenameFromUrl(::djinni::String::toCpp(w_url));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getBasenameFromUrl(const std::string& w_url) {
    try {
        auto r = ::nativium::io::FileHelper::getBasenameFromUrl(::djinni::String::toCpp(w_url));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
bool NTVFileHelper::removeFile(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::removeFile(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::removeDir(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::removeDir(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::isDir(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::isDir(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::isFile(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::isFile(::djinni::String::toCpp(w_path));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
int64_t NTVFileHelper::getFileSize(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getFileSize(::djinni::String::toCpp(w_path));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
bool NTVFileHelper::copyFile(const std::string& w_from,const std::string& w_to) {
    try {
        auto r = ::nativium::io::FileHelper::copyFile(::djinni::String::toCpp(w_from),
                 ::djinni::String::toCpp(w_to));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVFileHelper::moveFile(const std::string& w_from,const std::string& w_to) {
    try {
        auto r = ::nativium::io::FileHelper::moveFile(::djinni::String::toCpp(w_from),
                 ::djinni::String::toCpp(w_to));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
std::string NTVFileHelper::join(const std::string& w_first,const std::string& w_second) {
    try {
        auto r = ::nativium::io::FileHelper::join(::djinni::String::toCpp(w_first),
             ::djinni::String::toCpp(w_second));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getFileContentAsString(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getFileContentAsString(::djinni::String::toCpp(w_path));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
em::val NTVFileHelper::getFileContentAsBinary(const std::string& w_path) {
    try {
        auto r = ::nativium::io::FileHelper::getFileContentAsBinary(::djinni::String::toCpp(w_path));
        return ::djinni::Binary::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Binary>::handleNativeException(e);
    }
}
std::string NTVFileHelper::getHomeDir() {
    try {
        auto r = ::nativium::io::FileHelper::getHomeDir();
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_io_file_helper) {
    em::class_<::nativium::io::FileHelper>("FileHelper")
        .smart_ptr<std::shared_ptr<::nativium::io::FileHelper>>("FileHelper")
        .function("nativeDestroy", &NTVFileHelper::nativeDestroy)
        .class_function("shared", NTVFileHelper::shared)
        .function("setPlatformService", NTVFileHelper::setPlatformService)
        .function("getPlatformService", NTVFileHelper::getPlatformService)
        .function("hasPlatformService", NTVFileHelper::hasPlatformService)
        .class_function("createFile", NTVFileHelper::createFile)
        .class_function("createFileWithStringContent", NTVFileHelper::createFileWithStringContent)
        .class_function("createFileWithBinaryContent", NTVFileHelper::createFileWithBinaryContent)
        .class_function("createDir", NTVFileHelper::createDir)
        .class_function("listFiles", NTVFileHelper::listFiles)
        .class_function("getExtension", NTVFileHelper::getExtension)
        .class_function("getFilename", NTVFileHelper::getFilename)
        .class_function("getBasename", NTVFileHelper::getBasename)
        .class_function("getFilenameFromUrl", NTVFileHelper::getFilenameFromUrl)
        .class_function("getBasenameFromUrl", NTVFileHelper::getBasenameFromUrl)
        .class_function("removeFile", NTVFileHelper::removeFile)
        .class_function("removeDir", NTVFileHelper::removeDir)
        .class_function("isDir", NTVFileHelper::isDir)
        .class_function("isFile", NTVFileHelper::isFile)
        .class_function("getFileSize", NTVFileHelper::getFileSize)
        .class_function("copyFile", NTVFileHelper::copyFile)
        .class_function("moveFile", NTVFileHelper::moveFile)
        .class_function("join", NTVFileHelper::join)
        .class_function("getFileContentAsString", NTVFileHelper::getFileContentAsString)
        .class_function("getFileContentAsBinary", NTVFileHelper::getFileContentAsBinary)
        .class_function("getHomeDir", NTVFileHelper::getHomeDir)
        ;
}

}  // namespace djinni_generated
