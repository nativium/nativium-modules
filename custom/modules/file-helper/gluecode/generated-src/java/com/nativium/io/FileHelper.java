// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

package com.nativium.io;

import com.snapchat.djinni.NativeObjectManager;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class FileHelper {
    public abstract void setPlatformService(FileHelperPlatformService ps);

    public abstract FileHelperPlatformService getPlatformService();

    public abstract boolean hasPlatformService();

    public static native FileHelper shared();

    public static native boolean createFile(String path);

    public static native boolean createFileWithStringContent(String path, String content);

    public static native boolean createFileWithBinaryContent(String path, byte[] content);

    public static native boolean createDir(String path);

    public static native ArrayList<String> listFiles(String path);

    public static native String getExtension(String path);

    public static native String getFilename(String path);

    public static native String getBasename(String path);

    public static native String getFilenameFromUrl(String url);

    public static native String getBasenameFromUrl(String url);

    public static native boolean removeFile(String path);

    public static native boolean removeDir(String path);

    public static native boolean isDir(String path);

    public static native boolean isFile(String path);

    public static native long getFileSize(String path);

    public static native boolean copyFile(String from, String to);

    public static native boolean moveFile(String from, String to);

    public static native String join(String first, String second);

    public static native String getFileContentAsString(String path);

    public static native byte[] getFileContentAsBinary(String path);

    public static native String getHomeDir();

    public static final class CppProxy extends FileHelper
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setPlatformService(FileHelperPlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, FileHelperPlatformService ps);

        @Override
        public FileHelperPlatformService getPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformService(this.nativeRef);
        }
        private native FileHelperPlatformService native_getPlatformService(long _nativeRef);

        @Override
        public boolean hasPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasPlatformService(this.nativeRef);
        }
        private native boolean native_hasPlatformService(long _nativeRef);
    }
}
