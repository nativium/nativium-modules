// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/nativium/net/http/NTVHttpClient.hpp"  // my header
#include "com/nativium/net/http/NTVHttpClientLogger.hpp"
#include "com/nativium/net/http/NTVHttpClientPlatformService.hpp"
#include "com/nativium/net/http/NTVHttpRequest.hpp"
#include "com/nativium/net/http/NTVHttpResponse.hpp"
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated {

NTVHttpClient::NTVHttpClient() : ::djinni::JniInterface<::nativium::net::http::HttpClient, NTVHttpClient>("com/nativium/net/http/HttpClient$CppProxy") {}

NTVHttpClient::~NTVHttpClient() = default;


CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::nativium::net::http::HttpClient>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpClient_shared(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::nativium::net::http::HttpClient::shared();
        return ::djinni::release(::djinni_generated::NTVHttpClient::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1setPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_ps)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        ref->setPlatformService(::djinni_generated::NTVHttpClientPlatformService::toCpp(jniEnv, j_ps));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1getPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        auto r = ref->getPlatformService();
        return ::djinni::release(::djinni_generated::NTVHttpClientPlatformService::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1hasPlatformService(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        auto r = ref->hasPlatformService();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1doRequest(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_request)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        auto r = ref->doRequest(::djinni_generated::NTVHttpRequest::toCpp(jniEnv, j_request));
        return ::djinni::release(::djinni_generated::NTVHttpResponse::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1setLogger(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_logger)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        ref->setLogger(::djinni_generated::NTVHttpClientLogger::toCpp(jniEnv, j_logger));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1getLogger(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        auto r = ref->getLogger();
        return ::djinni::release(::djinni_generated::NTVHttpClientLogger::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nativium_net_http_HttpClient_00024CppProxy_native_1hasLogger(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpClient>(nativeRef);
        auto r = ref->hasLogger();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
