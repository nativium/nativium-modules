// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "nativium/net/http/NTVHttpClient+Private.h"
#import "nativium/net/http/NTVHttpClient.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "nativium/net/http/NTVHttpClientLogger+Private.h"
#import "nativium/net/http/NTVHttpClientPlatformService+Private.h"
#import "nativium/net/http/NTVHttpRequest+Private.h"
#import "nativium/net/http/NTVHttpResponse+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NTVHttpClient ()

- (id)initWithCpp:(const std::shared_ptr<::nativium::net::http::HttpClient>&)cppRef;

@end

@implementation NTVHttpClient {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nativium::net::http::HttpClient>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nativium::net::http::HttpClient>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NTVHttpClient *)shared {
    try {
        auto objcpp_result_ = ::nativium::net::http::HttpClient::shared();
        return ::djinni_generated::HttpClient::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPlatformService:(nullable id<NTVHttpClientPlatformService>)ps {
    try {
        _cppRefHandle.get()->setPlatformService(::djinni_generated::HttpClientPlatformService::toCpp(ps));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<NTVHttpClientPlatformService>)getPlatformService {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPlatformService();
        return ::djinni_generated::HttpClientPlatformService::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasPlatformService {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->hasPlatformService();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NTVHttpResponse *)doRequest:(nonnull NTVHttpRequest *)request {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->doRequest(::djinni_generated::HttpRequest::toCpp(request));
        return ::djinni_generated::HttpResponse::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLogger:(nullable NTVHttpClientLogger *)logger {
    try {
        _cppRefHandle.get()->setLogger(::djinni_generated::HttpClientLogger::toCpp(logger));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable NTVHttpClientLogger *)getLogger {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLogger();
        return ::djinni_generated::HttpClientLogger::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)hasLogger {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->hasLogger();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpClient::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpClient::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NTVHttpClient>(cpp);
}

}  // namespace djinni_generated

@end
