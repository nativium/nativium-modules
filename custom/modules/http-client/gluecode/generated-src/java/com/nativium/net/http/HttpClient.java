// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

package com.nativium.net.http;

import com.snapchat.djinni.NativeObjectManager;
import java.util.concurrent.atomic.AtomicBoolean;

public abstract class HttpClient {
    public abstract void setPlatformService(HttpClientPlatformService ps);

    public abstract HttpClientPlatformService getPlatformService();

    public abstract boolean hasPlatformService();

    public abstract HttpResponse doRequest(HttpRequest request);

    public abstract void setLogger(HttpClientLogger logger);

    public abstract HttpClientLogger getLogger();

    public abstract boolean hasLogger();

    public static native HttpClient shared();

    public static final class CppProxy extends HttpClient
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
            NativeObjectManager.register(this, nativeRef);
        }
        public static native void nativeDestroy(long nativeRef);

        @Override
        public void setPlatformService(HttpClientPlatformService ps)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPlatformService(this.nativeRef, ps);
        }
        private native void native_setPlatformService(long _nativeRef, HttpClientPlatformService ps);

        @Override
        public HttpClientPlatformService getPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getPlatformService(this.nativeRef);
        }
        private native HttpClientPlatformService native_getPlatformService(long _nativeRef);

        @Override
        public boolean hasPlatformService()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasPlatformService(this.nativeRef);
        }
        private native boolean native_hasPlatformService(long _nativeRef);

        @Override
        public HttpResponse doRequest(HttpRequest request)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_doRequest(this.nativeRef, request);
        }
        private native HttpResponse native_doRequest(long _nativeRef, HttpRequest request);

        @Override
        public void setLogger(HttpClientLogger logger)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLogger(this.nativeRef, logger);
        }
        private native void native_setLogger(long _nativeRef, HttpClientLogger logger);

        @Override
        public HttpClientLogger getLogger()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getLogger(this.nativeRef);
        }
        private native HttpClientLogger native_getLogger(long _nativeRef);

        @Override
        public boolean hasLogger()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_hasLogger(this.nativeRef);
        }
        private native boolean native_hasLogger(long _nativeRef);
    }
}
