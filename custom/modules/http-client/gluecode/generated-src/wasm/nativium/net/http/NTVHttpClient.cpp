// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/net/http/NTVHttpClient.hpp"  // my header
#include "nativium/net/http/NTVHttpClientLogger.hpp"
#include "nativium/net/http/NTVHttpClientPlatformService.hpp"
#include "nativium/net/http/NTVHttpRequest.hpp"
#include "nativium/net/http/NTVHttpResponse.hpp"

namespace djinni_generated {

em::val NTVHttpClient::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "setPlatformService",
        "getPlatformService",
        "hasPlatformService",
        "doRequest",
        "setLogger",
        "getLogger",
        "hasLogger",
    });
    return methods;
}

em::val NTVHttpClient::shared() {
    try {
        auto r = ::nativium::net::http::HttpClient::shared();
        return ::djinni_generated::NTVHttpClient::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVHttpClient>::handleNativeException(e);
    }
}
void NTVHttpClient::setPlatformService(const CppType& self, const em::val& w_ps) {
    try {
        self->setPlatformService(::djinni_generated::NTVHttpClientPlatformService::toCpp(w_ps));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVHttpClient::getPlatformService(const CppType& self) {
    try {
        auto r = self->getPlatformService();
        return ::djinni_generated::NTVHttpClientPlatformService::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVHttpClientPlatformService>::handleNativeException(e);
    }
}
bool NTVHttpClient::hasPlatformService(const CppType& self) {
    try {
        auto r = self->hasPlatformService();
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
em::val NTVHttpClient::doRequest(const CppType& self, const em::val& w_request) {
    try {
        auto r = self->doRequest(::djinni_generated::NTVHttpRequest::toCpp(w_request));
        return ::djinni_generated::NTVHttpResponse::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVHttpResponse>::handleNativeException(e);
    }
}
void NTVHttpClient::setLogger(const CppType& self, const em::val& w_logger) {
    try {
        self->setLogger(::djinni_generated::NTVHttpClientLogger::toCpp(w_logger));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVHttpClient::getLogger(const CppType& self) {
    try {
        auto r = self->getLogger();
        return ::djinni_generated::NTVHttpClientLogger::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVHttpClientLogger>::handleNativeException(e);
    }
}
bool NTVHttpClient::hasLogger(const CppType& self) {
    try {
        auto r = self->hasLogger();
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_net_http_http_client) {
    em::class_<::nativium::net::http::HttpClient>("HttpClient")
        .smart_ptr<std::shared_ptr<::nativium::net::http::HttpClient>>("HttpClient")
        .function("nativeDestroy", &NTVHttpClient::nativeDestroy)
        .class_function("shared", NTVHttpClient::shared)
        .function("setPlatformService", NTVHttpClient::setPlatformService)
        .function("getPlatformService", NTVHttpClient::getPlatformService)
        .function("hasPlatformService", NTVHttpClient::hasPlatformService)
        .function("doRequest", NTVHttpClient::doRequest)
        .function("setLogger", NTVHttpClient::setLogger)
        .function("getLogger", NTVHttpClient::getLogger)
        .function("hasLogger", NTVHttpClient::hasLogger)
        ;
}

}  // namespace djinni_generated
