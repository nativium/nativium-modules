http_method = enum {
    method_get;
	method_post;
	method_head;
	method_put;
	method_delete;
	method_patch;
	method_connect;
	method_options;
	method_trace;
}

http_header = record {
    name: string;
	value: string;
} deriving(parcelable)

http_response = record {
    code: i32;
    body: string;
	url: string;
	headers: list<http_header>;
	cookies: list<http_cookie>;
} deriving(parcelable)

http_request_param = record {
    name: string;
	value: string;
} deriving(parcelable)

http_cookie = record {
    name: string;
	value: string;
} deriving(parcelable)

http_request = record {
	url: string;
    method: http_method;
    params: list<http_request_param>;
	headers: list<http_header>;
	cookies: list<http_cookie>;
	body: string;
} deriving(parcelable)

http_client_platform_service = interface +c +j +o +w {
	do_request(request: http_request): http_response;
}

http_client_logger = interface +c {
	on_request(request: http_request);
	on_response(request: http_request, response: http_response);
}

http_client = interface +c {
	static shared(): http_client;

	set_platform_service(ps: http_client_platform_service);
	get_platform_service(): http_client_platform_service;
	has_platform_service(): bool;

	do_request(request: http_request): http_response;

	set_logger(logger: http_client_logger);
	get_logger(): http_client_logger;
	has_logger(): bool;
}
