// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "nativium/helper/NTVHelperSharedDataHelper+Private.h"
#import "nativium/helper/NTVHelperSharedDataHelper.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "nativium/domain/NTVDomainCustomer+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NTVHelperSharedDataHelper ()

- (id)initWithCpp:(const std::shared_ptr<::nativium::helper::SharedDataHelper>&)cppRef;

@end

@implementation NTVHelperSharedDataHelper {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nativium::helper::SharedDataHelper>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nativium::helper::SharedDataHelper>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (void)setCustomer:(nonnull NTVDomainCustomer *)value {
    try {
        ::nativium::helper::SharedDataHelper::setCustomer(::djinni_generated::Customer::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nonnull NTVDomainCustomer *)getCustomer {
    try {
        auto objcpp_result_ = ::nativium::helper::SharedDataHelper::getCustomer();
        return ::djinni_generated::Customer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)storeCustomer {
    try {
        ::nativium::helper::SharedDataHelper::storeCustomer();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (void)setDemoFlag:(BOOL)value {
    try {
        ::nativium::helper::SharedDataHelper::setDemoFlag(::djinni::Bool::toCpp(value));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (BOOL)getDemoFlag {
    try {
        auto objcpp_result_ = ::nativium::helper::SharedDataHelper::getDemoFlag();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto SharedDataHelper::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto SharedDataHelper::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NTVHelperSharedDataHelper>(cpp);
}

}  // namespace djinni_generated

@end
