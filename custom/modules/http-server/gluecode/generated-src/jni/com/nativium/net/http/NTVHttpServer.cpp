// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "com/nativium/net/http/NTVHttpServer.hpp"  // my header
#include "com/nativium/net/http/NTVHttpServerConfig.hpp"
#include "djinni/jni/Marshal.hpp"

namespace djinni_generated {

NTVHttpServer::NTVHttpServer() : ::djinni::JniInterface<::nativium::net::http::HttpServer, NTVHttpServer>("com/nativium/net/http/HttpServer$CppProxy") {}

NTVHttpServer::~NTVHttpServer() = default;


CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::nativium::net::http::HttpServer>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpServer_shared(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        auto r = ::nativium::net::http::HttpServer::shared();
        return ::djinni::release(::djinni_generated::NTVHttpServer::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1initialize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_config)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        ref->initialize(::djinni_generated::NTVHttpServerConfig::toCpp(jniEnv, j_config));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1getConfig(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->getConfig();
        return ::djinni::release(::djinni_generated::NTVHttpServerConfig::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1start(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        ref->start();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1stop(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        ref->stop();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1waitForTermination(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        ref->waitForTermination();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1getSocketPort(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->getSocketPort();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1getSocketHost(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->getSocketHost();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1getSocketAddress(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->getSocketAddress();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1isSocketSecure(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->isSocketSecure();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_com_nativium_net_http_HttpServer_00024CppProxy_native_1isRunning(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::nativium::net::http::HttpServer>(nativeRef);
        auto r = ref->isRunning();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
