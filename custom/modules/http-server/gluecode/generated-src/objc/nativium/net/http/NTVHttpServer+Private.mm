// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#import "nativium/net/http/NTVHttpServer+Private.h"
#import "nativium/net/http/NTVHttpServer.h"
#import "djinni/objc/DJICppWrapperCache+Private.h"
#import "djinni/objc/DJIError.h"
#import "djinni/objc/DJIMarshal+Private.h"
#import "nativium/net/http/NTVHttpServerConfig+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface NTVHttpServer ()

- (id)initWithCpp:(const std::shared_ptr<::nativium::net::http::HttpServer>&)cppRef;

@end

@implementation NTVHttpServer {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::nativium::net::http::HttpServer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::nativium::net::http::HttpServer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable NTVHttpServer *)shared {
    try {
        auto objcpp_result_ = ::nativium::net::http::HttpServer::shared();
        return ::djinni_generated::HttpServer::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)initialize:(nonnull NTVHttpServerConfig *)config {
    try {
        _cppRefHandle.get()->initialize(::djinni_generated::HttpServerConfig::toCpp(config));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NTVHttpServerConfig *)getConfig {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getConfig();
        return ::djinni_generated::HttpServerConfig::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)start {
    try {
        _cppRefHandle.get()->start();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)stop {
    try {
        _cppRefHandle.get()->stop();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)waitForTermination {
    try {
        _cppRefHandle.get()->waitForTermination();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getSocketPort {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketPort();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSocketHost {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketHost();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getSocketAddress {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSocketAddress();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isSocketSecure {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isSocketSecure();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)isRunning {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isRunning();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto HttpServer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto HttpServer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<NTVHttpServer>(cpp);
}

}  // namespace djinni_generated

@end
