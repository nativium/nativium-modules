// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/text/StringHelper.hpp"

namespace djinni_generated {

struct NTVStringHelper : ::djinni::JsInterface<::nativium::text::StringHelper, NTVStringHelper> {
    using CppType = std::shared_ptr<::nativium::text::StringHelper>;
    using CppOptType = std::shared_ptr<::nativium::text::StringHelper>;
    using JsType = em::val;
    using Boxed = NTVStringHelper;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVStringHelper::fromCpp");
        return fromCppOpt(c);
    }

    static em::val cppProxyMethods();

    static std::string trim(const std::string& w_value);
    static std::string leftTrim(const std::string& w_value);
    static std::string rightTrim(const std::string& w_value);
    static std::string toLower(const std::string& w_value);
    static std::string toUpper(const std::string& w_value);
    static em::val split(const std::string& w_text,const std::string& w_sep,bool w_trimEmpty);
    static std::string encodeUri(const std::string& w_value);
    static std::string decodeUri(const std::string& w_value);

};

}  // namespace djinni_generated
