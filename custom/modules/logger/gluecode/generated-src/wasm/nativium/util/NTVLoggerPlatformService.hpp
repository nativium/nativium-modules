// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/util/LoggerPlatformService.hpp"

namespace djinni_generated {

struct NTVLoggerPlatformService : ::djinni::JsInterface<::nativium::util::LoggerPlatformService, NTVLoggerPlatformService> {
    using CppType = std::shared_ptr<::nativium::util::LoggerPlatformService>;
    using CppOptType = std::shared_ptr<::nativium::util::LoggerPlatformService>;
    using JsType = em::val;
    using Boxed = NTVLoggerPlatformService;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVLoggerPlatformService::fromCpp");
        return fromCppOpt(c);
    }


    struct JsProxy: ::djinni::JsProxyBase, ::nativium::util::LoggerPlatformService, ::djinni::InstanceTracker<JsProxy> {
        JsProxy(const em::val& v) : JsProxyBase(v) {}
        void v(const std::string & message) override;
        void d(const std::string & message) override;
        void i(const std::string & message) override;
        void w(const std::string & message) override;
        void e(const std::string & message) override;
        void setGroup(const std::string & group) override;
    };
};

}  // namespace djinni_generated
