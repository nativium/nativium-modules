// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/util/NTVLogger.hpp"  // my header
#include "nativium/util/NTVLoggerLevel.hpp"
#include "nativium/util/NTVLoggerPlatformService.hpp"

namespace djinni_generated {

em::val NTVLogger::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "setPlatformService",
        "getPlatformService",
        "hasPlatformService",
        "allowedLevel",
        "setLevel",
    });
    return methods;
}

em::val NTVLogger::shared() {
    try {
        auto r = ::nativium::util::Logger::shared();
        return ::djinni_generated::NTVLogger::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVLogger>::handleNativeException(e);
    }
}
void NTVLogger::setPlatformService(const CppType& self, const em::val& w_ps) {
    try {
        self->setPlatformService(::djinni_generated::NTVLoggerPlatformService::toCpp(w_ps));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVLogger::getPlatformService(const CppType& self) {
    try {
        auto r = self->getPlatformService();
        return ::djinni_generated::NTVLoggerPlatformService::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVLoggerPlatformService>::handleNativeException(e);
    }
}
bool NTVLogger::hasPlatformService(const CppType& self) {
    try {
        auto r = self->hasPlatformService();
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
bool NTVLogger::allowedLevel(const CppType& self, int32_t w_level) {
    try {
        auto r = self->allowedLevel(::djinni_generated::NTVLoggerLevel::toCpp(w_level));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
void NTVLogger::setLevel(const CppType& self, int32_t w_level) {
    try {
        self->setLevel(::djinni_generated::NTVLoggerLevel::toCpp(w_level));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::v(const std::string& w_message) {
    try {
        ::nativium::util::Logger::v(::djinni::String::toCpp(w_message));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::d(const std::string& w_message) {
    try {
        ::nativium::util::Logger::d(::djinni::String::toCpp(w_message));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::i(const std::string& w_message) {
    try {
        ::nativium::util::Logger::i(::djinni::String::toCpp(w_message));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::w(const std::string& w_message) {
    try {
        ::nativium::util::Logger::w(::djinni::String::toCpp(w_message));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::e(const std::string& w_message) {
    try {
        ::nativium::util::Logger::e(::djinni::String::toCpp(w_message));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVLogger::setGroup(const std::string& w_group) {
    try {
        ::nativium::util::Logger::setGroup(::djinni::String::toCpp(w_group));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_util_logger) {
    em::class_<::nativium::util::Logger>("Logger")
        .smart_ptr<std::shared_ptr<::nativium::util::Logger>>("Logger")
        .function("nativeDestroy", &NTVLogger::nativeDestroy)
        .class_function("shared", NTVLogger::shared)
        .function("setPlatformService", NTVLogger::setPlatformService)
        .function("getPlatformService", NTVLogger::getPlatformService)
        .function("hasPlatformService", NTVLogger::hasPlatformService)
        .function("allowedLevel", NTVLogger::allowedLevel)
        .function("setLevel", NTVLogger::setLevel)
        .class_function("v", NTVLogger::v)
        .class_function("d", NTVLogger::d)
        .class_function("i", NTVLogger::i)
        .class_function("w", NTVLogger::w)
        .class_function("e", NTVLogger::e)
        .class_function("setGroup", NTVLogger::setGroup)
        ;
}

}  // namespace djinni_generated
