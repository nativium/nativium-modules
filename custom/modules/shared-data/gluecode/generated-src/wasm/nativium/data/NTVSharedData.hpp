// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/data/SharedData.hpp"

namespace djinni_generated {

struct NTVSharedData : ::djinni::JsInterface<::nativium::data::SharedData, NTVSharedData> {
    using CppType = std::shared_ptr<::nativium::data::SharedData>;
    using CppOptType = std::shared_ptr<::nativium::data::SharedData>;
    using JsType = em::val;
    using Boxed = NTVSharedData;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVSharedData::fromCpp");
        return fromCppOpt(c);
    }

    static em::val cppProxyMethods();

    static em::val shared();
    static void setPlatformService(const CppType& self, const em::val& w_ps);
    static em::val getPlatformService(const CppType& self);
    static bool hasPlatformService(const CppType& self);
    static void setString(const CppType& self, const std::string& w_groupName,const std::string& w_key,const std::string& w_value);
    static void setInteger(const CppType& self, const std::string& w_groupName,const std::string& w_key,int32_t w_value);
    static void setLong(const CppType& self, const std::string& w_groupName,const std::string& w_key,int64_t w_value);
    static void setBool(const CppType& self, const std::string& w_groupName,const std::string& w_key,bool w_value);
    static void setFloat(const CppType& self, const std::string& w_groupName,const std::string& w_key,float w_value);
    static void setDouble(const CppType& self, const std::string& w_groupName,const std::string& w_key,double w_value);
    static std::string getString(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static int32_t getInteger(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static int64_t getLong(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static bool getBool(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static float getFloat(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static double getDouble(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static std::string getStringWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,const std::string& w_defaultValue);
    static int32_t getIntegerWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,int32_t w_defaultValue);
    static int64_t getLongWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,int64_t w_defaultValue);
    static bool getBoolWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,bool w_defaultValue);
    static float getFloatWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,float w_defaultValue);
    static double getDoubleWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,double w_defaultValue);
    static bool has(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static void remove(const CppType& self, const std::string& w_groupName,const std::string& w_key);
    static void clear(const CppType& self, const std::string& w_groupName);

};

}  // namespace djinni_generated
