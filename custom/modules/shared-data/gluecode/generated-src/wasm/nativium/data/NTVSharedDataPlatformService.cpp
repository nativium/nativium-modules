// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/data/NTVSharedDataPlatformService.hpp"  // my header

namespace djinni_generated {


void NTVSharedDataPlatformService::JsProxy::setString(const std::string & groupName,const std::string & key,const std::string & value) {
    auto ret = callMethod("setString", ::djinni::String::fromCpp(groupName),
                                       ::djinni::String::fromCpp(key),
                                       ::djinni::String::fromCpp(value));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::setInteger(const std::string & groupName,const std::string & key,int32_t value) {
    auto ret = callMethod("setInteger", ::djinni::String::fromCpp(groupName),
                                        ::djinni::String::fromCpp(key),
                                        ::djinni::I32::fromCpp(value));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::setLong(const std::string & groupName,const std::string & key,int64_t value) {
    auto ret = callMethod("setLong", ::djinni::String::fromCpp(groupName),
                                     ::djinni::String::fromCpp(key),
                                     ::djinni::I64::fromCpp(value));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::setBool(const std::string & groupName,const std::string & key,bool value) {
    auto ret = callMethod("setBool", ::djinni::String::fromCpp(groupName),
                                     ::djinni::String::fromCpp(key),
                                     ::djinni::Bool::fromCpp(value));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::setFloat(const std::string & groupName,const std::string & key,float value) {
    auto ret = callMethod("setFloat", ::djinni::String::fromCpp(groupName),
                                      ::djinni::String::fromCpp(key),
                                      ::djinni::F32::fromCpp(value));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::setDouble(const std::string & groupName,const std::string & key,double value) {
    auto ret = callMethod("setDouble", ::djinni::String::fromCpp(groupName),
                                       ::djinni::String::fromCpp(key),
                                       ::djinni::F64::fromCpp(value));
    checkError(ret);
}

std::string NTVSharedDataPlatformService::JsProxy::getString(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getString", ::djinni::String::fromCpp(groupName),
                                       ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

int32_t NTVSharedDataPlatformService::JsProxy::getInteger(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getInteger", ::djinni::String::fromCpp(groupName),
                                        ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::I32::toCpp(ret.as<int32_t>());
}

int64_t NTVSharedDataPlatformService::JsProxy::getLong(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getLong", ::djinni::String::fromCpp(groupName),
                                     ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::I64::toCpp(ret.as<int64_t>());
}

bool NTVSharedDataPlatformService::JsProxy::getBool(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getBool", ::djinni::String::fromCpp(groupName),
                                     ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

float NTVSharedDataPlatformService::JsProxy::getFloat(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getFloat", ::djinni::String::fromCpp(groupName),
                                      ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::F32::toCpp(ret.as<float>());
}

double NTVSharedDataPlatformService::JsProxy::getDouble(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("getDouble", ::djinni::String::fromCpp(groupName),
                                       ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::F64::toCpp(ret.as<double>());
}

std::string NTVSharedDataPlatformService::JsProxy::getStringWithDefaultValue(const std::string & groupName,const std::string & key,const std::string & defaultValue) {
    auto ret = callMethod("getStringWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                       ::djinni::String::fromCpp(key),
                                                       ::djinni::String::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::String::toCpp(ret.as<std::string>());
}

int32_t NTVSharedDataPlatformService::JsProxy::getIntegerWithDefaultValue(const std::string & groupName,const std::string & key,int32_t defaultValue) {
    auto ret = callMethod("getIntegerWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                        ::djinni::String::fromCpp(key),
                                                        ::djinni::I32::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::I32::toCpp(ret.as<int32_t>());
}

int64_t NTVSharedDataPlatformService::JsProxy::getLongWithDefaultValue(const std::string & groupName,const std::string & key,int64_t defaultValue) {
    auto ret = callMethod("getLongWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                     ::djinni::String::fromCpp(key),
                                                     ::djinni::I64::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::I64::toCpp(ret.as<int64_t>());
}

bool NTVSharedDataPlatformService::JsProxy::getBoolWithDefaultValue(const std::string & groupName,const std::string & key,bool defaultValue) {
    auto ret = callMethod("getBoolWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                     ::djinni::String::fromCpp(key),
                                                     ::djinni::Bool::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

float NTVSharedDataPlatformService::JsProxy::getFloatWithDefaultValue(const std::string & groupName,const std::string & key,float defaultValue) {
    auto ret = callMethod("getFloatWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                      ::djinni::String::fromCpp(key),
                                                      ::djinni::F32::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::F32::toCpp(ret.as<float>());
}

double NTVSharedDataPlatformService::JsProxy::getDoubleWithDefaultValue(const std::string & groupName,const std::string & key,double defaultValue) {
    auto ret = callMethod("getDoubleWithDefaultValue", ::djinni::String::fromCpp(groupName),
                                                       ::djinni::String::fromCpp(key),
                                                       ::djinni::F64::fromCpp(defaultValue));
    checkError(ret);
    return ::djinni::F64::toCpp(ret.as<double>());
}

bool NTVSharedDataPlatformService::JsProxy::has(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("has", ::djinni::String::fromCpp(groupName),
                                 ::djinni::String::fromCpp(key));
    checkError(ret);
    return ::djinni::Bool::toCpp(ret.as<bool>());
}

void NTVSharedDataPlatformService::JsProxy::remove(const std::string & groupName,const std::string & key) {
    auto ret = callMethod("remove", ::djinni::String::fromCpp(groupName),
                                    ::djinni::String::fromCpp(key));
    checkError(ret);
}

void NTVSharedDataPlatformService::JsProxy::clear(const std::string & groupName) {
    auto ret = callMethod("clear", ::djinni::String::fromCpp(groupName));
    checkError(ret);
}

EMSCRIPTEN_BINDINGS(nativium_data_shared_data_platform_service) {
    em::class_<::nativium::data::SharedDataPlatformService>("SharedDataPlatformService")
        .smart_ptr<std::shared_ptr<::nativium::data::SharedDataPlatformService>>("SharedDataPlatformService")
        .function("nativeDestroy", &NTVSharedDataPlatformService::nativeDestroy)
        ;
}

}  // namespace djinni_generated
