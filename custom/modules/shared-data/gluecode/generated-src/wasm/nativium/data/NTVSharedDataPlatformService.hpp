// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/data/SharedDataPlatformService.hpp"

namespace djinni_generated {

struct NTVSharedDataPlatformService : ::djinni::JsInterface<::nativium::data::SharedDataPlatformService, NTVSharedDataPlatformService> {
    using CppType = std::shared_ptr<::nativium::data::SharedDataPlatformService>;
    using CppOptType = std::shared_ptr<::nativium::data::SharedDataPlatformService>;
    using JsType = em::val;
    using Boxed = NTVSharedDataPlatformService;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVSharedDataPlatformService::fromCpp");
        return fromCppOpt(c);
    }


    struct JsProxy: ::djinni::JsProxyBase, ::nativium::data::SharedDataPlatformService, ::djinni::InstanceTracker<JsProxy> {
        JsProxy(const em::val& v) : JsProxyBase(v) {}
        void setString(const std::string & groupName,const std::string & key,const std::string & value) override;
        void setInteger(const std::string & groupName,const std::string & key,int32_t value) override;
        void setLong(const std::string & groupName,const std::string & key,int64_t value) override;
        void setBool(const std::string & groupName,const std::string & key,bool value) override;
        void setFloat(const std::string & groupName,const std::string & key,float value) override;
        void setDouble(const std::string & groupName,const std::string & key,double value) override;
        std::string getString(const std::string & groupName,const std::string & key) override;
        int32_t getInteger(const std::string & groupName,const std::string & key) override;
        int64_t getLong(const std::string & groupName,const std::string & key) override;
        bool getBool(const std::string & groupName,const std::string & key) override;
        float getFloat(const std::string & groupName,const std::string & key) override;
        double getDouble(const std::string & groupName,const std::string & key) override;
        std::string getStringWithDefaultValue(const std::string & groupName,const std::string & key,const std::string & defaultValue) override;
        int32_t getIntegerWithDefaultValue(const std::string & groupName,const std::string & key,int32_t defaultValue) override;
        int64_t getLongWithDefaultValue(const std::string & groupName,const std::string & key,int64_t defaultValue) override;
        bool getBoolWithDefaultValue(const std::string & groupName,const std::string & key,bool defaultValue) override;
        float getFloatWithDefaultValue(const std::string & groupName,const std::string & key,float defaultValue) override;
        double getDoubleWithDefaultValue(const std::string & groupName,const std::string & key,double defaultValue) override;
        bool has(const std::string & groupName,const std::string & key) override;
        void remove(const std::string & groupName,const std::string & key) override;
        void clear(const std::string & groupName) override;
    };
};

}  // namespace djinni_generated
