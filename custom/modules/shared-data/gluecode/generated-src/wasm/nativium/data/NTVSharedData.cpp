// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/data/NTVSharedData.hpp"  // my header
#include "nativium/data/NTVSharedDataPlatformService.hpp"

namespace djinni_generated {

em::val NTVSharedData::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
        "setPlatformService",
        "getPlatformService",
        "hasPlatformService",
        "setString",
        "setInteger",
        "setLong",
        "setBool",
        "setFloat",
        "setDouble",
        "getString",
        "getInteger",
        "getLong",
        "getBool",
        "getFloat",
        "getDouble",
        "getStringWithDefaultValue",
        "getIntegerWithDefaultValue",
        "getLongWithDefaultValue",
        "getBoolWithDefaultValue",
        "getFloatWithDefaultValue",
        "getDoubleWithDefaultValue",
        "has",
        "remove",
        "clear",
    });
    return methods;
}

em::val NTVSharedData::shared() {
    try {
        auto r = ::nativium::data::SharedData::shared();
        return ::djinni_generated::NTVSharedData::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVSharedData>::handleNativeException(e);
    }
}
void NTVSharedData::setPlatformService(const CppType& self, const em::val& w_ps) {
    try {
        self->setPlatformService(::djinni_generated::NTVSharedDataPlatformService::toCpp(w_ps));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
em::val NTVSharedData::getPlatformService(const CppType& self) {
    try {
        auto r = self->getPlatformService();
        return ::djinni_generated::NTVSharedDataPlatformService::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni_generated::NTVSharedDataPlatformService>::handleNativeException(e);
    }
}
bool NTVSharedData::hasPlatformService(const CppType& self) {
    try {
        auto r = self->hasPlatformService();
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
void NTVSharedData::setString(const CppType& self, const std::string& w_groupName,const std::string& w_key,const std::string& w_value) {
    try {
        self->setString(::djinni::String::toCpp(w_groupName),
                  ::djinni::String::toCpp(w_key),
                  ::djinni::String::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::setInteger(const CppType& self, const std::string& w_groupName,const std::string& w_key,int32_t w_value) {
    try {
        self->setInteger(::djinni::String::toCpp(w_groupName),
                   ::djinni::String::toCpp(w_key),
                   ::djinni::I32::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::setLong(const CppType& self, const std::string& w_groupName,const std::string& w_key,int64_t w_value) {
    try {
        self->setLong(::djinni::String::toCpp(w_groupName),
                ::djinni::String::toCpp(w_key),
                ::djinni::I64::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::setBool(const CppType& self, const std::string& w_groupName,const std::string& w_key,bool w_value) {
    try {
        self->setBool(::djinni::String::toCpp(w_groupName),
                ::djinni::String::toCpp(w_key),
                ::djinni::Bool::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::setFloat(const CppType& self, const std::string& w_groupName,const std::string& w_key,float w_value) {
    try {
        self->setFloat(::djinni::String::toCpp(w_groupName),
                 ::djinni::String::toCpp(w_key),
                 ::djinni::F32::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::setDouble(const CppType& self, const std::string& w_groupName,const std::string& w_key,double w_value) {
    try {
        self->setDouble(::djinni::String::toCpp(w_groupName),
                  ::djinni::String::toCpp(w_key),
                  ::djinni::F64::toCpp(w_value));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
std::string NTVSharedData::getString(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getString(::djinni::String::toCpp(w_groupName),
                  ::djinni::String::toCpp(w_key));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
int32_t NTVSharedData::getInteger(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getInteger(::djinni::String::toCpp(w_groupName),
                   ::djinni::String::toCpp(w_key));
        return ::djinni::I32::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I32>::handleNativeException(e);
    }
}
int64_t NTVSharedData::getLong(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getLong(::djinni::String::toCpp(w_groupName),
                ::djinni::String::toCpp(w_key));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
bool NTVSharedData::getBool(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getBool(::djinni::String::toCpp(w_groupName),
                ::djinni::String::toCpp(w_key));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
float NTVSharedData::getFloat(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getFloat(::djinni::String::toCpp(w_groupName),
                 ::djinni::String::toCpp(w_key));
        return ::djinni::F32::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::F32>::handleNativeException(e);
    }
}
double NTVSharedData::getDouble(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->getDouble(::djinni::String::toCpp(w_groupName),
                  ::djinni::String::toCpp(w_key));
        return ::djinni::F64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::F64>::handleNativeException(e);
    }
}
std::string NTVSharedData::getStringWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,const std::string& w_defaultValue) {
    try {
        auto r = self->getStringWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                  ::djinni::String::toCpp(w_key),
                                  ::djinni::String::toCpp(w_defaultValue));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
int32_t NTVSharedData::getIntegerWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,int32_t w_defaultValue) {
    try {
        auto r = self->getIntegerWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                   ::djinni::String::toCpp(w_key),
                                   ::djinni::I32::toCpp(w_defaultValue));
        return ::djinni::I32::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I32>::handleNativeException(e);
    }
}
int64_t NTVSharedData::getLongWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,int64_t w_defaultValue) {
    try {
        auto r = self->getLongWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                ::djinni::String::toCpp(w_key),
                                ::djinni::I64::toCpp(w_defaultValue));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
bool NTVSharedData::getBoolWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,bool w_defaultValue) {
    try {
        auto r = self->getBoolWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                ::djinni::String::toCpp(w_key),
                                ::djinni::Bool::toCpp(w_defaultValue));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
float NTVSharedData::getFloatWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,float w_defaultValue) {
    try {
        auto r = self->getFloatWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                 ::djinni::String::toCpp(w_key),
                                 ::djinni::F32::toCpp(w_defaultValue));
        return ::djinni::F32::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::F32>::handleNativeException(e);
    }
}
double NTVSharedData::getDoubleWithDefaultValue(const CppType& self, const std::string& w_groupName,const std::string& w_key,double w_defaultValue) {
    try {
        auto r = self->getDoubleWithDefaultValue(::djinni::String::toCpp(w_groupName),
                                  ::djinni::String::toCpp(w_key),
                                  ::djinni::F64::toCpp(w_defaultValue));
        return ::djinni::F64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::F64>::handleNativeException(e);
    }
}
bool NTVSharedData::has(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        auto r = self->has(::djinni::String::toCpp(w_groupName),
            ::djinni::String::toCpp(w_key));
        return ::djinni::Bool::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Bool>::handleNativeException(e);
    }
}
void NTVSharedData::remove(const CppType& self, const std::string& w_groupName,const std::string& w_key) {
    try {
        self->remove(::djinni::String::toCpp(w_groupName),
               ::djinni::String::toCpp(w_key));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}
void NTVSharedData::clear(const CppType& self, const std::string& w_groupName) {
    try {
        self->clear(::djinni::String::toCpp(w_groupName));
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<void>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_data_shared_data) {
    em::class_<::nativium::data::SharedData>("SharedData")
        .smart_ptr<std::shared_ptr<::nativium::data::SharedData>>("SharedData")
        .function("nativeDestroy", &NTVSharedData::nativeDestroy)
        .class_function("shared", NTVSharedData::shared)
        .function("setPlatformService", NTVSharedData::setPlatformService)
        .function("getPlatformService", NTVSharedData::getPlatformService)
        .function("hasPlatformService", NTVSharedData::hasPlatformService)
        .function("setString", NTVSharedData::setString)
        .function("setInteger", NTVSharedData::setInteger)
        .function("setLong", NTVSharedData::setLong)
        .function("setBool", NTVSharedData::setBool)
        .function("setFloat", NTVSharedData::setFloat)
        .function("setDouble", NTVSharedData::setDouble)
        .function("getString", NTVSharedData::getString)
        .function("getInteger", NTVSharedData::getInteger)
        .function("getLong", NTVSharedData::getLong)
        .function("getBool", NTVSharedData::getBool)
        .function("getFloat", NTVSharedData::getFloat)
        .function("getDouble", NTVSharedData::getDouble)
        .function("getStringWithDefaultValue", NTVSharedData::getStringWithDefaultValue)
        .function("getIntegerWithDefaultValue", NTVSharedData::getIntegerWithDefaultValue)
        .function("getLongWithDefaultValue", NTVSharedData::getLongWithDefaultValue)
        .function("getBoolWithDefaultValue", NTVSharedData::getBoolWithDefaultValue)
        .function("getFloatWithDefaultValue", NTVSharedData::getFloatWithDefaultValue)
        .function("getDoubleWithDefaultValue", NTVSharedData::getDoubleWithDefaultValue)
        .function("has", NTVSharedData::has)
        .function("remove", NTVSharedData::remove)
        .function("clear", NTVSharedData::clear)
        ;
}

}  // namespace djinni_generated
