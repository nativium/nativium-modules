// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#pragma once

#include "djinni/wasm/djinni_wasm.hpp"
#include "nativium/time/DateTime.hpp"

namespace djinni_generated {

struct NTVDateTime : ::djinni::JsInterface<::nativium::time::DateTime, NTVDateTime> {
    using CppType = std::shared_ptr<::nativium::time::DateTime>;
    using CppOptType = std::shared_ptr<::nativium::time::DateTime>;
    using JsType = em::val;
    using Boxed = NTVDateTime;

    static CppType toCpp(JsType j) { return _fromJs(j); }
    static JsType fromCppOpt(const CppOptType& c) { return {_toJs(c)}; }
    static JsType fromCpp(const CppType& c) {
        djinni::checkForNull(c.get(), "NTVDateTime::fromCpp");
        return fromCppOpt(c);
    }

    static em::val cppProxyMethods();

    static em::val getDateTimeFromString(const std::string& w_value);
    static std::string getStringFromDateTime(const em::val& w_value);
    static em::val getDateTimeFromStringWithFormat(const std::string& w_value,const std::string& w_format);
    static std::string getCurrentDateTimeAsString();
    static em::val getCurrentDateTime();
    static em::val getDateTimeFromSeconds(int64_t w_value);
    static em::val getDateTimeFromMilliseconds(int64_t w_value);
    static int64_t getTimestampInMillisecondsFromDateTime(const em::val& w_value);
    static int64_t getTimestampInSecondsFromDateTime(const em::val& w_value);
    static std::string getCurrentTimestampInSecondsAsString();
    static int64_t getCurrentTimestampInSeconds();
    static std::string getCurrentTimestampInMillisecondsAsString();
    static int64_t getCurrentTimestampInMilliseconds();
    static std::string getFormattedStringFromDateTime(const em::val& w_value,const std::string& w_format);
    static int64_t getMillisecondsFromTimeString(const std::string& w_value);
    static em::val getDateTimeFromTimeInPosixTimezone(const std::string& w_time,const std::string& w_timezone);

};

}  // namespace djinni_generated
