// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from proj.djinni

#include "nativium/time/NTVDateTime.hpp"  // my header

namespace djinni_generated {

em::val NTVDateTime::cppProxyMethods() {
    static const em::val methods = em::val::array(std::vector<std::string> {
    });
    return methods;
}

em::val NTVDateTime::getDateTimeFromString(const std::string& w_value) {
    try {
        auto r = ::nativium::time::DateTime::getDateTimeFromString(::djinni::String::toCpp(w_value));
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}
std::string NTVDateTime::getStringFromDateTime(const em::val& w_value) {
    try {
        auto r = ::nativium::time::DateTime::getStringFromDateTime(::djinni::Date::toCpp(w_value));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
em::val NTVDateTime::getDateTimeFromStringWithFormat(const std::string& w_value,const std::string& w_format) {
    try {
        auto r = ::nativium::time::DateTime::getDateTimeFromStringWithFormat(::djinni::String::toCpp(w_value),
                                        ::djinni::String::toCpp(w_format));
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}
std::string NTVDateTime::getCurrentDateTimeAsString() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentDateTimeAsString();
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
em::val NTVDateTime::getCurrentDateTime() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentDateTime();
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}
em::val NTVDateTime::getDateTimeFromSeconds(int64_t w_value) {
    try {
        auto r = ::nativium::time::DateTime::getDateTimeFromSeconds(::djinni::I64::toCpp(w_value));
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}
em::val NTVDateTime::getDateTimeFromMilliseconds(int64_t w_value) {
    try {
        auto r = ::nativium::time::DateTime::getDateTimeFromMilliseconds(::djinni::I64::toCpp(w_value));
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}
int64_t NTVDateTime::getTimestampInMillisecondsFromDateTime(const em::val& w_value) {
    try {
        auto r = ::nativium::time::DateTime::getTimestampInMillisecondsFromDateTime(::djinni::Date::toCpp(w_value));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
int64_t NTVDateTime::getTimestampInSecondsFromDateTime(const em::val& w_value) {
    try {
        auto r = ::nativium::time::DateTime::getTimestampInSecondsFromDateTime(::djinni::Date::toCpp(w_value));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
std::string NTVDateTime::getCurrentTimestampInSecondsAsString() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentTimestampInSecondsAsString();
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
int64_t NTVDateTime::getCurrentTimestampInSeconds() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentTimestampInSeconds();
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
std::string NTVDateTime::getCurrentTimestampInMillisecondsAsString() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentTimestampInMillisecondsAsString();
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
int64_t NTVDateTime::getCurrentTimestampInMilliseconds() {
    try {
        auto r = ::nativium::time::DateTime::getCurrentTimestampInMilliseconds();
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
std::string NTVDateTime::getFormattedStringFromDateTime(const em::val& w_value,const std::string& w_format) {
    try {
        auto r = ::nativium::time::DateTime::getFormattedStringFromDateTime(::djinni::Date::toCpp(w_value),
                                       ::djinni::String::toCpp(w_format));
        return ::djinni::String::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::String>::handleNativeException(e);
    }
}
int64_t NTVDateTime::getMillisecondsFromTimeString(const std::string& w_value) {
    try {
        auto r = ::nativium::time::DateTime::getMillisecondsFromTimeString(::djinni::String::toCpp(w_value));
        return ::djinni::I64::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::I64>::handleNativeException(e);
    }
}
em::val NTVDateTime::getDateTimeFromTimeInPosixTimezone(const std::string& w_time,const std::string& w_timezone) {
    try {
        auto r = ::nativium::time::DateTime::getDateTimeFromTimeInPosixTimezone(::djinni::String::toCpp(w_time),
                                           ::djinni::String::toCpp(w_timezone));
        return ::djinni::Date::fromCpp(r);
    }
    catch(const std::exception& e) {
        return djinni::ExceptionHandlingTraits<::djinni::Date>::handleNativeException(e);
    }
}

EMSCRIPTEN_BINDINGS(nativium_time_date_time) {
    em::class_<::nativium::time::DateTime>("DateTime")
        .smart_ptr<std::shared_ptr<::nativium::time::DateTime>>("DateTime")
        .function("nativeDestroy", &NTVDateTime::nativeDestroy)
        .class_function("getDateTimeFromString", NTVDateTime::getDateTimeFromString)
        .class_function("getStringFromDateTime", NTVDateTime::getStringFromDateTime)
        .class_function("getDateTimeFromStringWithFormat", NTVDateTime::getDateTimeFromStringWithFormat)
        .class_function("getCurrentDateTimeAsString", NTVDateTime::getCurrentDateTimeAsString)
        .class_function("getCurrentDateTime", NTVDateTime::getCurrentDateTime)
        .class_function("getDateTimeFromSeconds", NTVDateTime::getDateTimeFromSeconds)
        .class_function("getDateTimeFromMilliseconds", NTVDateTime::getDateTimeFromMilliseconds)
        .class_function("getTimestampInMillisecondsFromDateTime", NTVDateTime::getTimestampInMillisecondsFromDateTime)
        .class_function("getTimestampInSecondsFromDateTime", NTVDateTime::getTimestampInSecondsFromDateTime)
        .class_function("getCurrentTimestampInSecondsAsString", NTVDateTime::getCurrentTimestampInSecondsAsString)
        .class_function("getCurrentTimestampInSeconds", NTVDateTime::getCurrentTimestampInSeconds)
        .class_function("getCurrentTimestampInMillisecondsAsString", NTVDateTime::getCurrentTimestampInMillisecondsAsString)
        .class_function("getCurrentTimestampInMilliseconds", NTVDateTime::getCurrentTimestampInMilliseconds)
        .class_function("getFormattedStringFromDateTime", NTVDateTime::getFormattedStringFromDateTime)
        .class_function("getMillisecondsFromTimeString", NTVDateTime::getMillisecondsFromTimeString)
        .class_function("getDateTimeFromTimeInPosixTimezone", NTVDateTime::getDateTimeFromTimeInPosixTimezone)
        ;
}

}  // namespace djinni_generated
